#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import glob
import os
import re
import sys
import codecs
import getopt
import logging
logging.basicConfig(level=logging.INFO, #DEBUG
    format='%(asctime)s %(name)s: %(levelname)-8s %(message)s',
    datefmt='%H:%M:%S'
    #filename='./hoo2013.log', #filemode='w', datefmt='%Y-%m-%d %H:%M:%S',
)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
gl = logging.getLogger('ROC') #global logger

'''
Select several words in different .roc files, create gnuplot
file.

Expect output and filenames generated by do_roc_nnnnn.sh

pberck@cheerilee:/scratch/pberck/2013/roc$ python roc_sel_plot.py -w in -r ".*ROC3.*roc" >in.roc
gnuplot:
#accuracy over training lines:
plot [][] "< grep l2r0 in.roc" using 13:11

#ROC points, label is parameters:
gnuplot> plot [][] "< grep l2r0 in.roc" using 6:7:12 with labels

#ROC points, lines is parameters:
gnuplot> plot [][] "< grep l2r0 in.roc" using 6:7:13 with labels

# TPs over lines for l2r0
plot [][] "< grep 'l2r0' in.roc | sort -n -k13" using 13:2 with lines

#Accuracy graph, l2r0 l3r0 lr40 over lines
plot [][] "< grep 'l2r0' in.roc | sort -n -k13" using 13:11 with lines,\
"< grep 'l4r0' in.roc | sort -n -k13" using 13:11 with lines,\
"< grep 'l3r0' in.roc | sort -n -k13" using 13:11 with lines

#3d                              dots
splot "in.roc" using 6:7:13 with points palette
splot "< sort -n -k13 in.roc" using 6:7:13:13 with lines palette
'''

# ----------------------------------------------------------------------------

#cls

# ----------------------------------------------------------------------------

"""
#TRAIN:/scratch/pberck/2013/data/nyt.3e7.1000000
#TEST:nyt.t10000
#PARAMS:l2r0_-a1+D
# word TP FP FN TN pt0 pt1 accuracy precision recall Fscore
At 0 0 74 228828 0.0 0.0 0.999676717547 -1 0.0 0.0
maturity 0 0 6 228896 0.0 0.0 0.999973787909 -1 0.0 0.0
"""

tr_str = "^#TRAIN:.*\.(\d+)"
re_tr = re.compile(tr_str, re.IGNORECASE)
te_str = "^#TEST:(.*)"
re_te = re.compile(te_str, re.IGNORECASE)
pa_str = "^#PARAMS:(.*)"
re_pa = re.compile(pa_str, re.IGNORECASE)

def process_roc(rocfile, word, of):
    gl.info("Reading file: "+rocfile)
    f = codecs.open(rocfile, "r", "utf-8")

    line = f.readline()
    m = re_tr.match(line)
    if m:
        tr_info = m.group(1) #number of lines
        gl.info(tr_info)
    else:
        gl.error("File contains no header")
        return
    line = f.readline()
    m = re_te.match(line)
    if m:
        te_info = m.group(1)
        gl.info(te_info)
    else:
        gl.error("File contains no header")
        return
    line = f.readline()
    m = re_pa.match(line)
    if m:
        pa_info = m.group(1)
        gl.info(pa_info)
    else:
        gl.error("File contains no header")
        return

    for line in f:
        if line[0] == "#":
            continue
        bits = line.split()
        if bits[0] == word:
            gl.info(line[:-1])
            of.write(line[:-1]+" "+pa_info+" "+tr_info+" "+rocfile+"\n")
    f.close()

    gl.info("Ready")

# ----------------------------------------------------------------------------

word = "the"
roc_str = "(.*)roc$"
out = "out"

try:
    opts, args = getopt.getopt(sys.argv[1:], "o:w:r:", ["word="])
except getopt.GetoptError, err:
    # print help information and exit:
    gl.error(str(err))
    sys.exit(2)
for o, a in opts:
    if o in ("-w"):
        word = a
    elif o in ("-r"):
        roc_str = a
    elif o in ("-r"):
        rc = int(a)
    else:
        gl.error("Unhandled option")
        assert False, "unhandled option"

roc_re  = re.compile(roc_str, re.IGNORECASE)
roc_files = os.listdir( "." )
roc_files = filter(roc_re.search, roc_files)

out_gnuplot_name = out + ".gnuplot"
out_data_name    = out + ".roc.sel.data"
gl.info("Output: "+out_gnuplot_name+"/"+out_data_name)

out_data_file = codecs.open(out_data_name, "w", "utf-8")

# Same format as .roc files, but little extra at end
# Same gnuplot file should work.

out_data_file.write("# word TP FP FN TN pt0 pt1 accuracy precision recall Fscore params trlines rocfile\n")

# Test if word is w0_w1 etc
words = word.split('_')
files_str = ""
for w in words:
    for roc_file in roc_files:
        gl.info(roc_file)
        process_roc(roc_file, w, out_data_file)
        files_str += roc_file+","
out_data_file.close()

out_gnuplot_file = open(out_gnuplot_name, 'w')
files_str = files_str[:-1]
out_gnuplot_file.write("set title \"ROC on "+word.replace('_',',')+"\"\n")
out_gnuplot_file.write("# "+files_str+"\n")
out_gnuplot_file.write("set xlabel \"X\"\n")
out_gnuplot_file.write("set key bottom\n")
out_gnuplot_file.write("set ylabel \"Y\"\n")
out_gnuplot_file.write("set grid\n")
out_gnuplot_file.write("plot [0:1][0:1] \""+out_data_name+"\" using 6:7 with points,\\\n")
out_gnuplot_file.write("\""+out_data_name+"\" using 6:7:1 with labels offset 1.5,0.5 notitle\n")
out_gnuplot_file.write("set terminal push\n")
out_gnuplot_file.write("set terminal postscript eps enhanced color solid rounded lw 2 'Helvetica' 10\n")
out_gnuplot_file.write("set out \""+out_data_name+".ps\"\n")
out_gnuplot_file.write("replot\n")
out_gnuplot_file.write("!epstopdf \""+out_data_name+".ps\"\n")
out_gnuplot_file.write("set term pop\n")
out_gnuplot_file.close()

'''
plot [0:.005][0:1] "nyt.t10000.l2r0_ROC30035.px.roc" using 6:7:1 with labels
set terminal push
set terminal postscript eps enhanced color solid rounded lw 2 'Helvetica' 10
set out 'plot2f.ps'
replot
!epstopdf 'plot2f.ps'
set term pop

import subprocess
proc = subprocess.Popen(['gnuplot','-p'], 
                        shell=True,
                        stdin=subprocess.PIPE,
                        )
proc.stdin.write('set xrange [0:10]; set yrange [-2:2]\n')
proc.stdin.write('plot sin(x)\n')
proc.stdin.write('quit\n') #close the gnuplot window

proc.communicate("""
set xrange [0:10]; set yrange [-2:2]
plot sin(x)
pause 4
""")
'''
